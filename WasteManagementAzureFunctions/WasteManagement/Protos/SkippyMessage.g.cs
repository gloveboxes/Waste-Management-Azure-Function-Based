// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace SkippyCore {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class SkippyMessage {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_SkippyCore_SkippyMessage__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::SkippyCore.SkippyMessage, global::SkippyCore.SkippyMessage.Builder> internal__static_SkippyCore_SkippyMessage__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_SkippyCore_SkippyMessage_DeviceMessage__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::SkippyCore.SkippyMessage.Types.DeviceMessage, global::SkippyCore.SkippyMessage.Types.DeviceMessage.Builder> internal__static_SkippyCore_SkippyMessage_DeviceMessage__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_SkippyCore_SkippyMessage_AccelerometerMessage__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::SkippyCore.SkippyMessage.Types.AccelerometerMessage, global::SkippyCore.SkippyMessage.Types.AccelerometerMessage.Builder> internal__static_SkippyCore_SkippyMessage_AccelerometerMessage__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_SkippyCore_SkippyMessage_SignalStrengthMessage__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::SkippyCore.SkippyMessage.Types.SignalStrengthMessage, global::SkippyCore.SkippyMessage.Types.SignalStrengthMessage.Builder> internal__static_SkippyCore_SkippyMessage_SignalStrengthMessage__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static SkippyMessage() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "ChNTa2lwcHlNZXNzYWdlLnByb3RvEgpTa2lwcHlDb3JlIq4FCg1Ta2lwcHlN", 
              "ZXNzYWdlEjcKBmRldmljZRgBIAIoCzInLlNraXBweUNvcmUuU2tpcHB5TWVz", 
              "c2FnZS5EZXZpY2VNZXNzYWdlEjoKBnJlYXNvbhgCIAIoDjIqLlNraXBweUNv", 
              "cmUuU2tpcHB5TWVzc2FnZS5SZWFzb25Gb3JNZXNzYWdlEhMKC2Rlc2NyaXB0", 
              "aW9uGAMgASgJEhcKD3RlbXBlcmF0dXJlT2theRgEIAEoCBJFCg1hY2NlbGVy", 
              "b21ldGVyGAUgASgLMi4uU2tpcHB5Q29yZS5Ta2lwcHlNZXNzYWdlLkFjY2Vs", 
              "ZXJvbWV0ZXJNZXNzYWdlEhIKCnVsdHJhc291bmQYBiABKAUSGQoRYmF0dGVy", 
              "eVZvbHRhZ2VfbVYYByABKA0SRwoOc2lnbmFsU3RyZW5ndGgYCCABKAsyLy5T", 
              "a2lwcHlDb3JlLlNraXBweU1lc3NhZ2UuU2lnbmFsU3RyZW5ndGhNZXNzYWdl", 
              "EhEKCXRpbWVzdGFtcBgJIAEoCRIWCg50ZW1wZXJhdHVyZV9kQxgKIAEoBRIV", 
              "Cg11bHRyYXNvdW5kUmF3GAsgAygFGjoKDURldmljZU1lc3NhZ2USEAoIZGV2", 
              "aWNlSWQYASACKAwSFwoPZmlybXdhcmVWZXJzaW9uGAIgASgJGj0KFEFjY2Vs", 
              "ZXJvbWV0ZXJNZXNzYWdlEgsKA3hfZxgBIAIoAhILCgN5X2cYAiACKAISCwoD", 
              "el9nGAMgAigCGj8KFVNpZ25hbFN0cmVuZ3RoTWVzc2FnZRIQCghyc3NpX2Ri", 
              "bRgBIAIoERIUCgxiaXRFcnJvclJhdGUYAiACKA0iPQoQUmVhc29uRm9yTWVz", 
              "c2FnZRILCgdTSUdOX09OEAASEQoNU0FNUExFX1BFUklPRBABEgkKBUFMQVJN", 
            "EAI="));
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_SkippyCore_SkippyMessage__Descriptor = Descriptor.MessageTypes[0];
          internal__static_SkippyCore_SkippyMessage__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::SkippyCore.SkippyMessage, global::SkippyCore.SkippyMessage.Builder>(internal__static_SkippyCore_SkippyMessage__Descriptor,
                  new string[] { "Device", "Reason", "Description", "TemperatureOkay", "Accelerometer", "Ultrasound", "BatteryVoltageMV", "SignalStrength", "Timestamp", "TemperatureDC", "UltrasoundRaw", });
          internal__static_SkippyCore_SkippyMessage_DeviceMessage__Descriptor = internal__static_SkippyCore_SkippyMessage__Descriptor.NestedTypes[0];
          internal__static_SkippyCore_SkippyMessage_DeviceMessage__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::SkippyCore.SkippyMessage.Types.DeviceMessage, global::SkippyCore.SkippyMessage.Types.DeviceMessage.Builder>(internal__static_SkippyCore_SkippyMessage_DeviceMessage__Descriptor,
                  new string[] { "DeviceId", "FirmwareVersion", });
          internal__static_SkippyCore_SkippyMessage_AccelerometerMessage__Descriptor = internal__static_SkippyCore_SkippyMessage__Descriptor.NestedTypes[1];
          internal__static_SkippyCore_SkippyMessage_AccelerometerMessage__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::SkippyCore.SkippyMessage.Types.AccelerometerMessage, global::SkippyCore.SkippyMessage.Types.AccelerometerMessage.Builder>(internal__static_SkippyCore_SkippyMessage_AccelerometerMessage__Descriptor,
                  new string[] { "XG", "YG", "ZG", });
          internal__static_SkippyCore_SkippyMessage_SignalStrengthMessage__Descriptor = internal__static_SkippyCore_SkippyMessage__Descriptor.NestedTypes[2];
          internal__static_SkippyCore_SkippyMessage_SignalStrengthMessage__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::SkippyCore.SkippyMessage.Types.SignalStrengthMessage, global::SkippyCore.SkippyMessage.Types.SignalStrengthMessage.Builder>(internal__static_SkippyCore_SkippyMessage_SignalStrengthMessage__Descriptor,
                  new string[] { "RssiDbm", "BitErrorRate", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SkippyMessage : pb::GeneratedMessage<SkippyMessage, SkippyMessage.Builder> {
    private SkippyMessage() { }
    private static readonly SkippyMessage defaultInstance = new SkippyMessage().MakeReadOnly();
    private static readonly string[] _skippyMessageFieldNames = new string[] { "accelerometer", "batteryVoltage_mV", "description", "device", "reason", "signalStrength", "temperatureOkay", "temperature_dC", "timestamp", "ultrasound", "ultrasoundRaw" };
    private static readonly uint[] _skippyMessageFieldTags = new uint[] { 42, 56, 26, 10, 16, 66, 32, 80, 74, 48, 88 };
    public static SkippyMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SkippyMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SkippyMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::SkippyCore.Proto.SkippyMessage.internal__static_SkippyCore_SkippyMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SkippyMessage, SkippyMessage.Builder> InternalFieldAccessors {
      get { return global::SkippyCore.Proto.SkippyMessage.internal__static_SkippyCore_SkippyMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ReasonForMessage {
        SIGN_ON = 0,
        SAMPLE_PERIOD = 1,
        ALARM = 2,
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class DeviceMessage : pb::GeneratedMessage<DeviceMessage, DeviceMessage.Builder> {
        private DeviceMessage() { }
        private static readonly DeviceMessage defaultInstance = new DeviceMessage().MakeReadOnly();
        private static readonly string[] _deviceMessageFieldNames = new string[] { "deviceId", "firmwareVersion" };
        private static readonly uint[] _deviceMessageFieldTags = new uint[] { 10, 18 };
        public static DeviceMessage DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override DeviceMessage DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override DeviceMessage ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::SkippyCore.Proto.SkippyMessage.internal__static_SkippyCore_SkippyMessage_DeviceMessage__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<DeviceMessage, DeviceMessage.Builder> InternalFieldAccessors {
          get { return global::SkippyCore.Proto.SkippyMessage.internal__static_SkippyCore_SkippyMessage_DeviceMessage__FieldAccessorTable; }
        }
        
        public const int DeviceIdFieldNumber = 1;
        private bool hasDeviceId;
        private pb::ByteString deviceId_ = pb::ByteString.Empty;
        public bool HasDeviceId {
          get { return hasDeviceId; }
        }
        public pb::ByteString DeviceId {
          get { return deviceId_; }
        }
        
        public const int FirmwareVersionFieldNumber = 2;
        private bool hasFirmwareVersion;
        private string firmwareVersion_ = "";
        public bool HasFirmwareVersion {
          get { return hasFirmwareVersion; }
        }
        public string FirmwareVersion {
          get { return firmwareVersion_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasDeviceId) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _deviceMessageFieldNames;
          if (hasDeviceId) {
            output.WriteBytes(1, field_names[0], DeviceId);
          }
          if (hasFirmwareVersion) {
            output.WriteString(2, field_names[1], FirmwareVersion);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasDeviceId) {
            size += pb::CodedOutputStream.ComputeBytesSize(1, DeviceId);
          }
          if (hasFirmwareVersion) {
            size += pb::CodedOutputStream.ComputeStringSize(2, FirmwareVersion);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static DeviceMessage ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DeviceMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DeviceMessage ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DeviceMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DeviceMessage ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DeviceMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static DeviceMessage ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static DeviceMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static DeviceMessage ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DeviceMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private DeviceMessage MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(DeviceMessage prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<DeviceMessage, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(DeviceMessage cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private DeviceMessage result;
          
          private DeviceMessage PrepareBuilder() {
            if (resultIsReadOnly) {
              DeviceMessage original = result;
              result = new DeviceMessage();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override DeviceMessage MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::SkippyCore.SkippyMessage.Types.DeviceMessage.Descriptor; }
          }
          
          public override DeviceMessage DefaultInstanceForType {
            get { return global::SkippyCore.SkippyMessage.Types.DeviceMessage.DefaultInstance; }
          }
          
          public override DeviceMessage BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is DeviceMessage) {
              return MergeFrom((DeviceMessage) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(DeviceMessage other) {
            if (other == global::SkippyCore.SkippyMessage.Types.DeviceMessage.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasDeviceId) {
              DeviceId = other.DeviceId;
            }
            if (other.HasFirmwareVersion) {
              FirmwareVersion = other.FirmwareVersion;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_deviceMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _deviceMessageFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasDeviceId = input.ReadBytes(ref result.deviceId_);
                  break;
                }
                case 18: {
                  result.hasFirmwareVersion = input.ReadString(ref result.firmwareVersion_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasDeviceId {
            get { return result.hasDeviceId; }
          }
          public pb::ByteString DeviceId {
            get { return result.DeviceId; }
            set { SetDeviceId(value); }
          }
          public Builder SetDeviceId(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasDeviceId = true;
            result.deviceId_ = value;
            return this;
          }
          public Builder ClearDeviceId() {
            PrepareBuilder();
            result.hasDeviceId = false;
            result.deviceId_ = pb::ByteString.Empty;
            return this;
          }
          
          public bool HasFirmwareVersion {
            get { return result.hasFirmwareVersion; }
          }
          public string FirmwareVersion {
            get { return result.FirmwareVersion; }
            set { SetFirmwareVersion(value); }
          }
          public Builder SetFirmwareVersion(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasFirmwareVersion = true;
            result.firmwareVersion_ = value;
            return this;
          }
          public Builder ClearFirmwareVersion() {
            PrepareBuilder();
            result.hasFirmwareVersion = false;
            result.firmwareVersion_ = "";
            return this;
          }
        }
        static DeviceMessage() {
          object.ReferenceEquals(global::SkippyCore.Proto.SkippyMessage.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class AccelerometerMessage : pb::GeneratedMessage<AccelerometerMessage, AccelerometerMessage.Builder> {
        private AccelerometerMessage() { }
        private static readonly AccelerometerMessage defaultInstance = new AccelerometerMessage().MakeReadOnly();
        private static readonly string[] _accelerometerMessageFieldNames = new string[] { "x_g", "y_g", "z_g" };
        private static readonly uint[] _accelerometerMessageFieldTags = new uint[] { 13, 21, 29 };
        public static AccelerometerMessage DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override AccelerometerMessage DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override AccelerometerMessage ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::SkippyCore.Proto.SkippyMessage.internal__static_SkippyCore_SkippyMessage_AccelerometerMessage__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<AccelerometerMessage, AccelerometerMessage.Builder> InternalFieldAccessors {
          get { return global::SkippyCore.Proto.SkippyMessage.internal__static_SkippyCore_SkippyMessage_AccelerometerMessage__FieldAccessorTable; }
        }
        
        public const int XGFieldNumber = 1;
        private bool hasXG;
        private float xG_;
        public bool HasXG {
          get { return hasXG; }
        }
        public float XG {
          get { return xG_; }
        }
        
        public const int YGFieldNumber = 2;
        private bool hasYG;
        private float yG_;
        public bool HasYG {
          get { return hasYG; }
        }
        public float YG {
          get { return yG_; }
        }
        
        public const int ZGFieldNumber = 3;
        private bool hasZG;
        private float zG_;
        public bool HasZG {
          get { return hasZG; }
        }
        public float ZG {
          get { return zG_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasXG) return false;
            if (!hasYG) return false;
            if (!hasZG) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _accelerometerMessageFieldNames;
          if (hasXG) {
            output.WriteFloat(1, field_names[0], XG);
          }
          if (hasYG) {
            output.WriteFloat(2, field_names[1], YG);
          }
          if (hasZG) {
            output.WriteFloat(3, field_names[2], ZG);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasXG) {
            size += pb::CodedOutputStream.ComputeFloatSize(1, XG);
          }
          if (hasYG) {
            size += pb::CodedOutputStream.ComputeFloatSize(2, YG);
          }
          if (hasZG) {
            size += pb::CodedOutputStream.ComputeFloatSize(3, ZG);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static AccelerometerMessage ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AccelerometerMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AccelerometerMessage ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AccelerometerMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AccelerometerMessage ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AccelerometerMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static AccelerometerMessage ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static AccelerometerMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static AccelerometerMessage ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AccelerometerMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private AccelerometerMessage MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(AccelerometerMessage prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<AccelerometerMessage, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(AccelerometerMessage cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private AccelerometerMessage result;
          
          private AccelerometerMessage PrepareBuilder() {
            if (resultIsReadOnly) {
              AccelerometerMessage original = result;
              result = new AccelerometerMessage();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override AccelerometerMessage MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::SkippyCore.SkippyMessage.Types.AccelerometerMessage.Descriptor; }
          }
          
          public override AccelerometerMessage DefaultInstanceForType {
            get { return global::SkippyCore.SkippyMessage.Types.AccelerometerMessage.DefaultInstance; }
          }
          
          public override AccelerometerMessage BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is AccelerometerMessage) {
              return MergeFrom((AccelerometerMessage) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(AccelerometerMessage other) {
            if (other == global::SkippyCore.SkippyMessage.Types.AccelerometerMessage.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasXG) {
              XG = other.XG;
            }
            if (other.HasYG) {
              YG = other.YG;
            }
            if (other.HasZG) {
              ZG = other.ZG;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_accelerometerMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _accelerometerMessageFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 13: {
                  result.hasXG = input.ReadFloat(ref result.xG_);
                  break;
                }
                case 21: {
                  result.hasYG = input.ReadFloat(ref result.yG_);
                  break;
                }
                case 29: {
                  result.hasZG = input.ReadFloat(ref result.zG_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasXG {
            get { return result.hasXG; }
          }
          public float XG {
            get { return result.XG; }
            set { SetXG(value); }
          }
          public Builder SetXG(float value) {
            PrepareBuilder();
            result.hasXG = true;
            result.xG_ = value;
            return this;
          }
          public Builder ClearXG() {
            PrepareBuilder();
            result.hasXG = false;
            result.xG_ = 0F;
            return this;
          }
          
          public bool HasYG {
            get { return result.hasYG; }
          }
          public float YG {
            get { return result.YG; }
            set { SetYG(value); }
          }
          public Builder SetYG(float value) {
            PrepareBuilder();
            result.hasYG = true;
            result.yG_ = value;
            return this;
          }
          public Builder ClearYG() {
            PrepareBuilder();
            result.hasYG = false;
            result.yG_ = 0F;
            return this;
          }
          
          public bool HasZG {
            get { return result.hasZG; }
          }
          public float ZG {
            get { return result.ZG; }
            set { SetZG(value); }
          }
          public Builder SetZG(float value) {
            PrepareBuilder();
            result.hasZG = true;
            result.zG_ = value;
            return this;
          }
          public Builder ClearZG() {
            PrepareBuilder();
            result.hasZG = false;
            result.zG_ = 0F;
            return this;
          }
        }
        static AccelerometerMessage() {
          object.ReferenceEquals(global::SkippyCore.Proto.SkippyMessage.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class SignalStrengthMessage : pb::GeneratedMessage<SignalStrengthMessage, SignalStrengthMessage.Builder> {
        private SignalStrengthMessage() { }
        private static readonly SignalStrengthMessage defaultInstance = new SignalStrengthMessage().MakeReadOnly();
        private static readonly string[] _signalStrengthMessageFieldNames = new string[] { "bitErrorRate", "rssi_dbm" };
        private static readonly uint[] _signalStrengthMessageFieldTags = new uint[] { 16, 8 };
        public static SignalStrengthMessage DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override SignalStrengthMessage DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override SignalStrengthMessage ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::SkippyCore.Proto.SkippyMessage.internal__static_SkippyCore_SkippyMessage_SignalStrengthMessage__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<SignalStrengthMessage, SignalStrengthMessage.Builder> InternalFieldAccessors {
          get { return global::SkippyCore.Proto.SkippyMessage.internal__static_SkippyCore_SkippyMessage_SignalStrengthMessage__FieldAccessorTable; }
        }
        
        public const int RssiDbmFieldNumber = 1;
        private bool hasRssiDbm;
        private int rssiDbm_;
        public bool HasRssiDbm {
          get { return hasRssiDbm; }
        }
        public int RssiDbm {
          get { return rssiDbm_; }
        }
        
        public const int BitErrorRateFieldNumber = 2;
        private bool hasBitErrorRate;
        private uint bitErrorRate_;
        public bool HasBitErrorRate {
          get { return hasBitErrorRate; }
        }
        [global::System.CLSCompliant(false)]
        public uint BitErrorRate {
          get { return bitErrorRate_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasRssiDbm) return false;
            if (!hasBitErrorRate) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _signalStrengthMessageFieldNames;
          if (hasRssiDbm) {
            output.WriteSInt32(1, field_names[1], RssiDbm);
          }
          if (hasBitErrorRate) {
            output.WriteUInt32(2, field_names[0], BitErrorRate);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasRssiDbm) {
            size += pb::CodedOutputStream.ComputeSInt32Size(1, RssiDbm);
          }
          if (hasBitErrorRate) {
            size += pb::CodedOutputStream.ComputeUInt32Size(2, BitErrorRate);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static SignalStrengthMessage ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SignalStrengthMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SignalStrengthMessage ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SignalStrengthMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SignalStrengthMessage ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SignalStrengthMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static SignalStrengthMessage ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static SignalStrengthMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static SignalStrengthMessage ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SignalStrengthMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private SignalStrengthMessage MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(SignalStrengthMessage prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<SignalStrengthMessage, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(SignalStrengthMessage cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private SignalStrengthMessage result;
          
          private SignalStrengthMessage PrepareBuilder() {
            if (resultIsReadOnly) {
              SignalStrengthMessage original = result;
              result = new SignalStrengthMessage();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override SignalStrengthMessage MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::SkippyCore.SkippyMessage.Types.SignalStrengthMessage.Descriptor; }
          }
          
          public override SignalStrengthMessage DefaultInstanceForType {
            get { return global::SkippyCore.SkippyMessage.Types.SignalStrengthMessage.DefaultInstance; }
          }
          
          public override SignalStrengthMessage BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is SignalStrengthMessage) {
              return MergeFrom((SignalStrengthMessage) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(SignalStrengthMessage other) {
            if (other == global::SkippyCore.SkippyMessage.Types.SignalStrengthMessage.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasRssiDbm) {
              RssiDbm = other.RssiDbm;
            }
            if (other.HasBitErrorRate) {
              BitErrorRate = other.BitErrorRate;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_signalStrengthMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _signalStrengthMessageFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasRssiDbm = input.ReadSInt32(ref result.rssiDbm_);
                  break;
                }
                case 16: {
                  result.hasBitErrorRate = input.ReadUInt32(ref result.bitErrorRate_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasRssiDbm {
            get { return result.hasRssiDbm; }
          }
          public int RssiDbm {
            get { return result.RssiDbm; }
            set { SetRssiDbm(value); }
          }
          public Builder SetRssiDbm(int value) {
            PrepareBuilder();
            result.hasRssiDbm = true;
            result.rssiDbm_ = value;
            return this;
          }
          public Builder ClearRssiDbm() {
            PrepareBuilder();
            result.hasRssiDbm = false;
            result.rssiDbm_ = 0;
            return this;
          }
          
          public bool HasBitErrorRate {
            get { return result.hasBitErrorRate; }
          }
          [global::System.CLSCompliant(false)]
          public uint BitErrorRate {
            get { return result.BitErrorRate; }
            set { SetBitErrorRate(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetBitErrorRate(uint value) {
            PrepareBuilder();
            result.hasBitErrorRate = true;
            result.bitErrorRate_ = value;
            return this;
          }
          public Builder ClearBitErrorRate() {
            PrepareBuilder();
            result.hasBitErrorRate = false;
            result.bitErrorRate_ = 0;
            return this;
          }
        }
        static SignalStrengthMessage() {
          object.ReferenceEquals(global::SkippyCore.Proto.SkippyMessage.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int DeviceFieldNumber = 1;
    private bool hasDevice;
    private global::SkippyCore.SkippyMessage.Types.DeviceMessage device_;
    public bool HasDevice {
      get { return hasDevice; }
    }
    public global::SkippyCore.SkippyMessage.Types.DeviceMessage Device {
      get { return device_ ?? global::SkippyCore.SkippyMessage.Types.DeviceMessage.DefaultInstance; }
    }
    
    public const int ReasonFieldNumber = 2;
    private bool hasReason;
    private global::SkippyCore.SkippyMessage.Types.ReasonForMessage reason_ = global::SkippyCore.SkippyMessage.Types.ReasonForMessage.SIGN_ON;
    public bool HasReason {
      get { return hasReason; }
    }
    public global::SkippyCore.SkippyMessage.Types.ReasonForMessage Reason {
      get { return reason_; }
    }
    
    public const int DescriptionFieldNumber = 3;
    private bool hasDescription;
    private string description_ = "";
    public bool HasDescription {
      get { return hasDescription; }
    }
    public string Description {
      get { return description_; }
    }
    
    public const int TemperatureOkayFieldNumber = 4;
    private bool hasTemperatureOkay;
    private bool temperatureOkay_;
    public bool HasTemperatureOkay {
      get { return hasTemperatureOkay; }
    }
    public bool TemperatureOkay {
      get { return temperatureOkay_; }
    }
    
    public const int AccelerometerFieldNumber = 5;
    private bool hasAccelerometer;
    private global::SkippyCore.SkippyMessage.Types.AccelerometerMessage accelerometer_;
    public bool HasAccelerometer {
      get { return hasAccelerometer; }
    }
    public global::SkippyCore.SkippyMessage.Types.AccelerometerMessage Accelerometer {
      get { return accelerometer_ ?? global::SkippyCore.SkippyMessage.Types.AccelerometerMessage.DefaultInstance; }
    }
    
    public const int UltrasoundFieldNumber = 6;
    private bool hasUltrasound;
    private int ultrasound_;
    public bool HasUltrasound {
      get { return hasUltrasound; }
    }
    public int Ultrasound {
      get { return ultrasound_; }
    }
    
    public const int BatteryVoltageMVFieldNumber = 7;
    private bool hasBatteryVoltageMV;
    private uint batteryVoltageMV_;
    public bool HasBatteryVoltageMV {
      get { return hasBatteryVoltageMV; }
    }
    [global::System.CLSCompliant(false)]
    public uint BatteryVoltageMV {
      get { return batteryVoltageMV_; }
    }
    
    public const int SignalStrengthFieldNumber = 8;
    private bool hasSignalStrength;
    private global::SkippyCore.SkippyMessage.Types.SignalStrengthMessage signalStrength_;
    public bool HasSignalStrength {
      get { return hasSignalStrength; }
    }
    public global::SkippyCore.SkippyMessage.Types.SignalStrengthMessage SignalStrength {
      get { return signalStrength_ ?? global::SkippyCore.SkippyMessage.Types.SignalStrengthMessage.DefaultInstance; }
    }
    
    public const int TimestampFieldNumber = 9;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int TemperatureDCFieldNumber = 10;
    private bool hasTemperatureDC;
    private int temperatureDC_;
    public bool HasTemperatureDC {
      get { return hasTemperatureDC; }
    }
    public int TemperatureDC {
      get { return temperatureDC_; }
    }
    
    public const int UltrasoundRawFieldNumber = 11;
    private pbc::PopsicleList<int> ultrasoundRaw_ = new pbc::PopsicleList<int>();
    public scg::IList<int> UltrasoundRawList {
      get { return pbc::Lists.AsReadOnly(ultrasoundRaw_); }
    }
    public int UltrasoundRawCount {
      get { return ultrasoundRaw_.Count; }
    }
    public int GetUltrasoundRaw(int index) {
      return ultrasoundRaw_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDevice) return false;
        if (!hasReason) return false;
        if (!Device.IsInitialized) return false;
        if (HasAccelerometer) {
          if (!Accelerometer.IsInitialized) return false;
        }
        if (HasSignalStrength) {
          if (!SignalStrength.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _skippyMessageFieldNames;
      if (hasDevice) {
        output.WriteMessage(1, field_names[3], Device);
      }
      if (hasReason) {
        output.WriteEnum(2, field_names[4], (int) Reason, Reason);
      }
      if (hasDescription) {
        output.WriteString(3, field_names[2], Description);
      }
      if (hasTemperatureOkay) {
        output.WriteBool(4, field_names[6], TemperatureOkay);
      }
      if (hasAccelerometer) {
        output.WriteMessage(5, field_names[0], Accelerometer);
      }
      if (hasUltrasound) {
        output.WriteInt32(6, field_names[9], Ultrasound);
      }
      if (hasBatteryVoltageMV) {
        output.WriteUInt32(7, field_names[1], BatteryVoltageMV);
      }
      if (hasSignalStrength) {
        output.WriteMessage(8, field_names[5], SignalStrength);
      }
      if (hasTimestamp) {
        output.WriteString(9, field_names[8], Timestamp);
      }
      if (hasTemperatureDC) {
        output.WriteInt32(10, field_names[7], TemperatureDC);
      }
      if (ultrasoundRaw_.Count > 0) {
        output.WriteInt32Array(11, field_names[10], ultrasoundRaw_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDevice) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Device);
      }
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Reason);
      }
      if (hasDescription) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Description);
      }
      if (hasTemperatureOkay) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, TemperatureOkay);
      }
      if (hasAccelerometer) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, Accelerometer);
      }
      if (hasUltrasound) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, Ultrasound);
      }
      if (hasBatteryVoltageMV) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, BatteryVoltageMV);
      }
      if (hasSignalStrength) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, SignalStrength);
      }
      if (hasTimestamp) {
        size += pb::CodedOutputStream.ComputeStringSize(9, Timestamp);
      }
      if (hasTemperatureDC) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, TemperatureDC);
      }
      {
        int dataSize = 0;
        foreach (int element in UltrasoundRawList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * ultrasoundRaw_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SkippyMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkippyMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkippyMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkippyMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkippyMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkippyMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SkippyMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SkippyMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SkippyMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkippyMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SkippyMessage MakeReadOnly() {
      ultrasoundRaw_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SkippyMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SkippyMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SkippyMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SkippyMessage result;
      
      private SkippyMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          SkippyMessage original = result;
          result = new SkippyMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SkippyMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::SkippyCore.SkippyMessage.Descriptor; }
      }
      
      public override SkippyMessage DefaultInstanceForType {
        get { return global::SkippyCore.SkippyMessage.DefaultInstance; }
      }
      
      public override SkippyMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SkippyMessage) {
          return MergeFrom((SkippyMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SkippyMessage other) {
        if (other == global::SkippyCore.SkippyMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDevice) {
          MergeDevice(other.Device);
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        if (other.HasDescription) {
          Description = other.Description;
        }
        if (other.HasTemperatureOkay) {
          TemperatureOkay = other.TemperatureOkay;
        }
        if (other.HasAccelerometer) {
          MergeAccelerometer(other.Accelerometer);
        }
        if (other.HasUltrasound) {
          Ultrasound = other.Ultrasound;
        }
        if (other.HasBatteryVoltageMV) {
          BatteryVoltageMV = other.BatteryVoltageMV;
        }
        if (other.HasSignalStrength) {
          MergeSignalStrength(other.SignalStrength);
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasTemperatureDC) {
          TemperatureDC = other.TemperatureDC;
        }
        if (other.ultrasoundRaw_.Count != 0) {
          result.ultrasoundRaw_.Add(other.ultrasoundRaw_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_skippyMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _skippyMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::SkippyCore.SkippyMessage.Types.DeviceMessage.Builder subBuilder = global::SkippyCore.SkippyMessage.Types.DeviceMessage.CreateBuilder();
              if (result.hasDevice) {
                subBuilder.MergeFrom(Device);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Device = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.reason_, out unknown)) {
                result.hasReason = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              result.hasDescription = input.ReadString(ref result.description_);
              break;
            }
            case 32: {
              result.hasTemperatureOkay = input.ReadBool(ref result.temperatureOkay_);
              break;
            }
            case 42: {
              global::SkippyCore.SkippyMessage.Types.AccelerometerMessage.Builder subBuilder = global::SkippyCore.SkippyMessage.Types.AccelerometerMessage.CreateBuilder();
              if (result.hasAccelerometer) {
                subBuilder.MergeFrom(Accelerometer);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Accelerometer = subBuilder.BuildPartial();
              break;
            }
            case 48: {
              result.hasUltrasound = input.ReadInt32(ref result.ultrasound_);
              break;
            }
            case 56: {
              result.hasBatteryVoltageMV = input.ReadUInt32(ref result.batteryVoltageMV_);
              break;
            }
            case 66: {
              global::SkippyCore.SkippyMessage.Types.SignalStrengthMessage.Builder subBuilder = global::SkippyCore.SkippyMessage.Types.SignalStrengthMessage.CreateBuilder();
              if (result.hasSignalStrength) {
                subBuilder.MergeFrom(SignalStrength);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SignalStrength = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              result.hasTimestamp = input.ReadString(ref result.timestamp_);
              break;
            }
            case 80: {
              result.hasTemperatureDC = input.ReadInt32(ref result.temperatureDC_);
              break;
            }
            case 90:
            case 88: {
              input.ReadInt32Array(tag, field_name, result.ultrasoundRaw_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDevice {
       get { return result.hasDevice; }
      }
      public global::SkippyCore.SkippyMessage.Types.DeviceMessage Device {
        get { return result.Device; }
        set { SetDevice(value); }
      }
      public Builder SetDevice(global::SkippyCore.SkippyMessage.Types.DeviceMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDevice = true;
        result.device_ = value;
        return this;
      }
      public Builder SetDevice(global::SkippyCore.SkippyMessage.Types.DeviceMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDevice = true;
        result.device_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDevice(global::SkippyCore.SkippyMessage.Types.DeviceMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDevice &&
            result.device_ != global::SkippyCore.SkippyMessage.Types.DeviceMessage.DefaultInstance) {
            result.device_ = global::SkippyCore.SkippyMessage.Types.DeviceMessage.CreateBuilder(result.device_).MergeFrom(value).BuildPartial();
        } else {
          result.device_ = value;
        }
        result.hasDevice = true;
        return this;
      }
      public Builder ClearDevice() {
        PrepareBuilder();
        result.hasDevice = false;
        result.device_ = null;
        return this;
      }
      
      public bool HasReason {
       get { return result.hasReason; }
      }
      public global::SkippyCore.SkippyMessage.Types.ReasonForMessage Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(global::SkippyCore.SkippyMessage.Types.ReasonForMessage value) {
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = global::SkippyCore.SkippyMessage.Types.ReasonForMessage.SIGN_ON;
        return this;
      }
      
      public bool HasDescription {
        get { return result.hasDescription; }
      }
      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.hasDescription = false;
        result.description_ = "";
        return this;
      }
      
      public bool HasTemperatureOkay {
        get { return result.hasTemperatureOkay; }
      }
      public bool TemperatureOkay {
        get { return result.TemperatureOkay; }
        set { SetTemperatureOkay(value); }
      }
      public Builder SetTemperatureOkay(bool value) {
        PrepareBuilder();
        result.hasTemperatureOkay = true;
        result.temperatureOkay_ = value;
        return this;
      }
      public Builder ClearTemperatureOkay() {
        PrepareBuilder();
        result.hasTemperatureOkay = false;
        result.temperatureOkay_ = false;
        return this;
      }
      
      public bool HasAccelerometer {
       get { return result.hasAccelerometer; }
      }
      public global::SkippyCore.SkippyMessage.Types.AccelerometerMessage Accelerometer {
        get { return result.Accelerometer; }
        set { SetAccelerometer(value); }
      }
      public Builder SetAccelerometer(global::SkippyCore.SkippyMessage.Types.AccelerometerMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccelerometer = true;
        result.accelerometer_ = value;
        return this;
      }
      public Builder SetAccelerometer(global::SkippyCore.SkippyMessage.Types.AccelerometerMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccelerometer = true;
        result.accelerometer_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccelerometer(global::SkippyCore.SkippyMessage.Types.AccelerometerMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccelerometer &&
            result.accelerometer_ != global::SkippyCore.SkippyMessage.Types.AccelerometerMessage.DefaultInstance) {
            result.accelerometer_ = global::SkippyCore.SkippyMessage.Types.AccelerometerMessage.CreateBuilder(result.accelerometer_).MergeFrom(value).BuildPartial();
        } else {
          result.accelerometer_ = value;
        }
        result.hasAccelerometer = true;
        return this;
      }
      public Builder ClearAccelerometer() {
        PrepareBuilder();
        result.hasAccelerometer = false;
        result.accelerometer_ = null;
        return this;
      }
      
      public bool HasUltrasound {
        get { return result.hasUltrasound; }
      }
      public int Ultrasound {
        get { return result.Ultrasound; }
        set { SetUltrasound(value); }
      }
      public Builder SetUltrasound(int value) {
        PrepareBuilder();
        result.hasUltrasound = true;
        result.ultrasound_ = value;
        return this;
      }
      public Builder ClearUltrasound() {
        PrepareBuilder();
        result.hasUltrasound = false;
        result.ultrasound_ = 0;
        return this;
      }
      
      public bool HasBatteryVoltageMV {
        get { return result.hasBatteryVoltageMV; }
      }
      [global::System.CLSCompliant(false)]
      public uint BatteryVoltageMV {
        get { return result.BatteryVoltageMV; }
        set { SetBatteryVoltageMV(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBatteryVoltageMV(uint value) {
        PrepareBuilder();
        result.hasBatteryVoltageMV = true;
        result.batteryVoltageMV_ = value;
        return this;
      }
      public Builder ClearBatteryVoltageMV() {
        PrepareBuilder();
        result.hasBatteryVoltageMV = false;
        result.batteryVoltageMV_ = 0;
        return this;
      }
      
      public bool HasSignalStrength {
       get { return result.hasSignalStrength; }
      }
      public global::SkippyCore.SkippyMessage.Types.SignalStrengthMessage SignalStrength {
        get { return result.SignalStrength; }
        set { SetSignalStrength(value); }
      }
      public Builder SetSignalStrength(global::SkippyCore.SkippyMessage.Types.SignalStrengthMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSignalStrength = true;
        result.signalStrength_ = value;
        return this;
      }
      public Builder SetSignalStrength(global::SkippyCore.SkippyMessage.Types.SignalStrengthMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSignalStrength = true;
        result.signalStrength_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSignalStrength(global::SkippyCore.SkippyMessage.Types.SignalStrengthMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSignalStrength &&
            result.signalStrength_ != global::SkippyCore.SkippyMessage.Types.SignalStrengthMessage.DefaultInstance) {
            result.signalStrength_ = global::SkippyCore.SkippyMessage.Types.SignalStrengthMessage.CreateBuilder(result.signalStrength_).MergeFrom(value).BuildPartial();
        } else {
          result.signalStrength_ = value;
        }
        result.hasSignalStrength = true;
        return this;
      }
      public Builder ClearSignalStrength() {
        PrepareBuilder();
        result.hasSignalStrength = false;
        result.signalStrength_ = null;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public bool HasTemperatureDC {
        get { return result.hasTemperatureDC; }
      }
      public int TemperatureDC {
        get { return result.TemperatureDC; }
        set { SetTemperatureDC(value); }
      }
      public Builder SetTemperatureDC(int value) {
        PrepareBuilder();
        result.hasTemperatureDC = true;
        result.temperatureDC_ = value;
        return this;
      }
      public Builder ClearTemperatureDC() {
        PrepareBuilder();
        result.hasTemperatureDC = false;
        result.temperatureDC_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> UltrasoundRawList {
        get { return PrepareBuilder().ultrasoundRaw_; }
      }
      public int UltrasoundRawCount {
        get { return result.UltrasoundRawCount; }
      }
      public int GetUltrasoundRaw(int index) {
        return result.GetUltrasoundRaw(index);
      }
      public Builder SetUltrasoundRaw(int index, int value) {
        PrepareBuilder();
        result.ultrasoundRaw_[index] = value;
        return this;
      }
      public Builder AddUltrasoundRaw(int value) {
        PrepareBuilder();
        result.ultrasoundRaw_.Add(value);
        return this;
      }
      public Builder AddRangeUltrasoundRaw(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.ultrasoundRaw_.Add(values);
        return this;
      }
      public Builder ClearUltrasoundRaw() {
        PrepareBuilder();
        result.ultrasoundRaw_.Clear();
        return this;
      }
    }
    static SkippyMessage() {
      object.ReferenceEquals(global::SkippyCore.Proto.SkippyMessage.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
